<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.web3soft.commons.mybatis.sample.repository.ShardUserRepository">
    <!-- CodeBuilder Template Generated By MybatisX Start -->
    <resultMap id="TestUserMap" type="org.web3soft.commons.mybatis.sample.domain.User">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="roles" property="roles" jdbcType="VARCHAR"/>
        <result column="account" property="account" jdbcType="VARCHAR"/>
        <result column="password" property="password" jdbcType="VARCHAR"/>
        <result column="salt" property="salt" jdbcType="VARCHAR"/>
        <result column="name" property="name" jdbcType="VARCHAR"/>
        <result column="email" property="email" jdbcType="VARCHAR"/>
        <result column="telephone" property="telephone" jdbcType="VARCHAR"/>
        <result column="status" property="status" jdbcType="TINYINT"/>
        <result column="comment" property="comment" jdbcType="VARCHAR"/>
        <result column="gmt_created" property="gmtCreated" jdbcType="TIMESTAMP"/>
        <result column="gmt_modified" property="gmtModified" jdbcType="TIMESTAMP"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Table_Name">
        ${shardTable.name}
    </sql>
    <sql id="Base_Column_List">
        roles,
            account,
            password,
            salt,
            name,
            email,
            telephone,
            status,
            comment,
            gmt_created,
            gmt_modified    </sql>
    <sql id="Base_Column_List_WithId">
        id,
        <include refid="Base_Column_List"/>
    </sql>
    <sql id="Insert_Columns">
        <if test="record.roles != null">roles,</if>
        <if test="record.account != null">account,</if>
        <if test="record.password != null">password,</if>
        <if test="record.salt != null">salt,</if>
        <if test="record.name != null">name,</if>
        <if test="record.email != null">email,</if>
        <if test="record.telephone != null">telephone,</if>
        <if test="record.status != null">status,</if>
        <if test="record.comment != null">comment,</if>
        <if test="record.gmtCreated != null">gmt_created,</if>
        <if test="record.gmtModified != null">gmt_modified,</if>
    </sql>
    <sql id="Insert_Columns_WithId">
        <if test="record.id != null">id,</if>
        <include refid="Insert_Columns"/>
    </sql>
    <sql id="Insert_Values">
        <if test="record.roles != null">#{record.roles,jdbcType=VARCHAR},</if>
        <if test="record.account != null">#{record.account,jdbcType=VARCHAR},</if>
        <if test="record.password != null">#{record.password,jdbcType=VARCHAR},</if>
        <if test="record.salt != null">#{record.salt,jdbcType=VARCHAR},</if>
        <if test="record.name != null">#{record.name,jdbcType=VARCHAR},</if>
        <if test="record.email != null">#{record.email,jdbcType=VARCHAR},</if>
        <if test="record.telephone != null">#{record.telephone,jdbcType=VARCHAR},</if>
        <if test="record.status != null">#{record.status,jdbcType=TINYINT},</if>
        <if test="record.comment != null">#{record.comment,jdbcType=VARCHAR},</if>
        <if test="record.gmtCreated != null">#{record.gmtCreated,jdbcType=TIMESTAMP},</if>
        <if test="record.gmtModified != null">#{record.gmtModified,jdbcType=TIMESTAMP},</if>
    </sql>
    <sql id="Insert_Values_WithId">
        <if test="record.id != null">#{record.id,jdbcType=INTEGER},</if>
        <include refid="Insert_Values"/>
    </sql>
    <sql id="Batch_Insert_Values">
        #{record.roles,jdbcType=VARCHAR},
        #{record.account,jdbcType=VARCHAR},
        #{record.password,jdbcType=VARCHAR},
        #{record.salt,jdbcType=VARCHAR},
        #{record.name,jdbcType=VARCHAR},
        #{record.email,jdbcType=VARCHAR},
        #{record.telephone,jdbcType=VARCHAR},
        #{record.status,jdbcType=TINYINT},
        #{record.comment,jdbcType=VARCHAR},
        #{record.gmtCreated,jdbcType=TIMESTAMP},
        #{record.gmtModified,jdbcType=TIMESTAMP},
    </sql>
    <sql id="Batch_Insert_Values_WithId">
        #{record.id,jdbcType=INTEGER},
        <include refid="Batch_Insert_Values"/>
    </sql>
    <sql id="Update_Set_From_Bean">
        <if test="record.roles != null">roles = #{record.roles,jdbcType=VARCHAR} ,</if>
        <if test="record.account != null">account = #{record.account,jdbcType=VARCHAR} ,</if>
        <if test="record.password != null">password = #{record.password,jdbcType=VARCHAR} ,</if>
        <if test="record.salt != null">salt = #{record.salt,jdbcType=VARCHAR} ,</if>
        <if test="record.name != null">name = #{record.name,jdbcType=VARCHAR} ,</if>
        <if test="record.email != null">email = #{record.email,jdbcType=VARCHAR} ,</if>
        <if test="record.telephone != null">telephone = #{record.telephone,jdbcType=VARCHAR} ,</if>
        <if test="record.status != null">status = #{record.status,jdbcType=TINYINT} ,</if>
        <if test="record.comment != null">comment = #{record.comment,jdbcType=VARCHAR} ,</if>
        <if test="record.gmtCreated != null">gmt_created = #{record.gmtCreated,jdbcType=TIMESTAMP} ,</if>
        <if test="record.gmtModified != null">gmt_modified = #{record.gmtModified,jdbcType=TIMESTAMP} ,</if>
    </sql>
    <sql id="On_Duplicate_Key_Update">
        ON DUPLICATE KEY
        UPDATE
            roles =
        VALUES (roles), account =
        VALUES (account), password =
        VALUES (password), salt =
        VALUES (salt), name =
        VALUES (name), email =
        VALUES (email), telephone =
        VALUES (telephone), status =
        VALUES (status), comment =
        VALUES (comment), gmt_created =
        VALUES (gmt_created), gmt_modified =
        VALUES (gmt_modified)    </sql>
    <!-- insert -->
    <insert id="insert" parameterType="java.util.Map">
        <selectKey resultType="java.lang.Integer" keyProperty="record.id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into
        <include refid="Table_Name"/>
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <include refid="Insert_Columns"/>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <include refid="Insert_Values"/>
        </trim>
    </insert>
    <insert id="insertWithId" parameterType="java.util.Map">
        insert into
        <include refid="Table_Name"/>
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <include refid="Insert_Columns_WithId"/>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <include refid="Insert_Values_WithId"/>
        </trim>
    </insert>
    <insert id="batchInsert" parameterType="java.util.Map">
        insert into
        <include refid="Table_Name"/>
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <include refid="Base_Column_List"/>
        </trim>
        values
        <foreach collection="records" item="record" index="index" separator=",">
            <trim prefix="(" suffix=")" suffixOverrides=",">
                <include refid="Batch_Insert_Values"/>
            </trim>
        </foreach>
    </insert>
    <insert id="batchInsertWithId" parameterType="java.util.Map">
        insert into
        <include refid="Table_Name"/>
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <include refid="Base_Column_List_WithId"/>
        </trim>
        values
        <foreach collection="records" item="record" index="index" separator=",">
            <trim prefix="(" suffix=")" suffixOverrides=",">
                <include refid="Batch_Insert_Values_WithId"/>
            </trim>
        </foreach>
    </insert>
    <insert id="batchInsertOnDuplicateKey" parameterType="java.util.Map">
        insert into
        <include refid="Table_Name"/>
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <include refid="Base_Column_List"/>
        </trim>
        values
        <foreach collection="records" item="record" index="index" separator=",">
            <trim prefix="(" suffix=")" suffixOverrides=",">
                <include refid="Batch_Insert_Values"/>
            </trim>
        </foreach>
        <include refid="On_Duplicate_Key_Update"/>
    </insert>
    <insert id="batchInsertWithIdOnDuplicateKey" parameterType="java.util.Map">
        insert into
        <include refid="Table_Name"/>
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <include refid="Base_Column_List_WithId"/>
        </trim>
        values
        <foreach collection="records" item="record" index="index" separator=",">
            <trim prefix="(" suffix=")" suffixOverrides=",">
                <include refid="Batch_Insert_Values_WithId"/>
            </trim>
        </foreach>
        <include refid="On_Duplicate_Key_Update"/>
    </insert>
    <!-- end insert -->
    <!-- delete -->
    <delete id="deleteById" parameterType="java.util.Map">
        delete
        from
        <include refid="Table_Name"/>
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <delete id="deleteByExample" parameterType="java.util.Map">
        delete from
        <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <delete id="deleteIn" parameterType="java.util.Map">
        delete from
        <include refid="Table_Name"/>
        where id in
        <foreach collection="ids" item="id" index="index" open="(" separator="," close=")">
            #{id,jdbcType=INTEGER}
        </foreach>
    </delete>
    <!-- end delete -->
    <!-- update -->
    <update id="updateById" parameterType="java.util.Map">
        update
        <include refid="Table_Name"/>
        <set>
            <include refid="Update_Set_From_Bean"/>
        </set>
        where id = #{record.id,jdbcType=INTEGER}
    </update>
    <update id="updateByExample" parameterType="java.util.Map">
        update
        <include refid="Table_Name"/>
        <set>
            <include refid="Update_Set_From_Bean"/>
        </set>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </update>
    <update id="batchUpdateById" parameterType="java.util.Map">
        <foreach collection="records" item="record" index="index" open="" close="" separator=";">
            update
            <include refid="Table_Name"/>
            <set>
                <include refid="Update_Set_From_Bean"/>
            </set>
            where id = #{record.id,jdbcType=INTEGER}
        </foreach>
    </update>
    <!-- end update -->
    <!-- select -->
    <select id="selectById" resultMap="TestUserMap" parameterType="java.util.Map">
        select
        <include refid="Base_Column_List_WithId"/>
        from
        <include refid="Table_Name"/>
        where id = #{id,jdbcType=INTEGER}
    </select>
    <select id="selectByExample" resultMap="TestUserMap" parameterType="java.util.Map">
        select
        <if test="example != null and example.distinct">
            distinct
        </if>
        <include refid="Base_Column_List_WithId"/>
        from
        <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="example != null and example.orderByClause != null">
            order by ${example.orderByClause}
        </if>
    </select>
    <select id="selectOneByExample" resultMap="TestUserMap" parameterType="java.util.Map">
        select
        <include refid="Base_Column_List_WithId"/>
        from
        <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
        limit 1
    </select>
    <select id="selectIn" resultMap="TestUserMap" parameterType="java.util.Map">
        select
        <include refid="Base_Column_List_WithId"/>
        from
        <include refid="Table_Name"/>
        where id IN
        <foreach collection="ids" item="id" index="index" open="(" separator="," close=")">
            #{id,jdbcType=INTEGER}
        </foreach>
    </select>
    <select id="countByExample" resultType="java.lang.Integer" parameterType="java.util.Map">
        select count(*) as total from
        <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <select id="countByPager" resultType="java.lang.Integer" parameterType="java.util.Map">
        select count(*) as total from
        <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <select id="selectByPager" resultMap="TestUserMap" parameterType="java.util.Map">
        select
        <include refid="Base_Column_List_WithId"/>
        from
        <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="pager.sortItem != null and pager.sortItem != '' ">
            order by ${pager.sortItem} ${pager.sortType}
        </if>
        limit #{pager.startIndex} , #{pager.pageSize}
    </select>
    <select id="countByIdPager" resultType="java.util.Map" parameterType="java.util.Map">
        select convert(max(${pager.sortItem}), SIGNED) maxId,convert(min(${pager.sortItem}), SIGNED) minId,count(*) total from
        <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <select id="selectByIdPager" resultMap="TestUserMap" parameterType="java.util.Map">
        select
        <include refid="Base_Column_List"/>
        from
        <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="pager.sortItem != null and pager.sortItem != '' ">
            order by ${pager.sortItem} ${pager.sortType}
        </if>
        limit #{pager.pageSize}
    </select>
    <!-- end select -->
    <!-- CodeBuilder Template Generated By MybatisX End -->
</mapper>
