<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.web3soft.easytoken.wallet.data.repository.SysServerNodeRepository">
    <!-- CodeBuilder Template Generated By MybatisX Start -->
    <resultMap id="SysServerNodeMap" type="org.web3soft.easytoken.wallet.domain.SysServerNode">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="code" property="code" jdbcType="VARCHAR"/>
        <result column="name" property="name" jdbcType="VARCHAR"/>
        <result column="host" property="host" jdbcType="VARCHAR"/>
        <result column="enable_deposit" property="enableDeposit" jdbcType="TINYINT"/>
        <result column="enable_aggregate" property="enableAggregate" jdbcType="TINYINT"/>
        <result column="enable_withdraw" property="enableWithdraw" jdbcType="TINYINT"/>
        <result column="enable_sign" property="enableSign" jdbcType="TINYINT"/>
        <result column="enable_stat" property="enableStat" jdbcType="TINYINT"/>
        <result column="enable_crawler" property="enableCrawler" jdbcType="TINYINT"/>
        <result column="enable_reload_cache" property="enableReloadCache" jdbcType="TINYINT"/>
        <result column="status" property="status" jdbcType="INTEGER"/>
        <result column="memo" property="memo" jdbcType="VARCHAR"/>
        <result column="created_at" property="createdAt" jdbcType="TIMESTAMP"/>
        <result column="updated_at" property="updatedAt" jdbcType="TIMESTAMP"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Table_Name">
        sys_server_node
    </sql>
    <sql id="Base_Column_List">
        code,
            name,
            host,
            enable_deposit,
            enable_aggregate,
            enable_withdraw,
            enable_sign,
            enable_stat,
            enable_crawler,
            enable_reload_cache,
            status,
            memo,
            created_at,
            updated_at    </sql>
    <sql id="Base_Column_List_WithId">
        id,
        <include refid="Base_Column_List"/>
    </sql>
    <sql id="Select_Column_List">
        <if test="columns != null and columns.size > 0">
            <foreach collection="columns" item="column" index="index" separator=",">
                ${column}
            </foreach>
        </if>
        <if test="columns == null or columns.size == 0">
            <include refid="Base_Column_List_WithId"/>
        </if>
    </sql>
    <sql id="Insert_Columns">
        <if test="record.code != null">code,</if>
        <if test="record.name != null">name,</if>
        <if test="record.host != null">host,</if>
        <if test="record.enableDeposit != null">enable_deposit,</if>
        <if test="record.enableAggregate != null">enable_aggregate,</if>
        <if test="record.enableWithdraw != null">enable_withdraw,</if>
        <if test="record.enableSign != null">enable_sign,</if>
        <if test="record.enableStat != null">enable_stat,</if>
        <if test="record.enableCrawler != null">enable_crawler,</if>
        <if test="record.enableReloadCache != null">enable_reload_cache,</if>
        <if test="record.status != null">status,</if>
        <if test="record.memo != null">memo,</if>
        <if test="record.createdAt != null">created_at,</if>
        <if test="record.updatedAt != null">updated_at,</if>
    </sql>
    <sql id="Insert_Columns_WithId">
        <if test="record.id != null">id,</if>
        <include refid="Insert_Columns"/>
    </sql>
    <sql id="Insert_Values">
        <if test="record.code != null">#{record.code,jdbcType=VARCHAR},</if>
        <if test="record.name != null">#{record.name,jdbcType=VARCHAR},</if>
        <if test="record.host != null">#{record.host,jdbcType=VARCHAR},</if>
        <if test="record.enableDeposit != null">#{record.enableDeposit,jdbcType=TINYINT},</if>
        <if test="record.enableAggregate != null">#{record.enableAggregate,jdbcType=TINYINT},</if>
        <if test="record.enableWithdraw != null">#{record.enableWithdraw,jdbcType=TINYINT},</if>
        <if test="record.enableSign != null">#{record.enableSign,jdbcType=TINYINT},</if>
        <if test="record.enableStat != null">#{record.enableStat,jdbcType=TINYINT},</if>
        <if test="record.enableCrawler != null">#{record.enableCrawler,jdbcType=TINYINT},</if>
        <if test="record.enableReloadCache != null">#{record.enableReloadCache,jdbcType=TINYINT},</if>
        <if test="record.status != null">#{record.status,jdbcType=INTEGER},</if>
        <if test="record.memo != null">#{record.memo,jdbcType=VARCHAR},</if>
        <if test="record.createdAt != null">#{record.createdAt,jdbcType=TIMESTAMP},</if>
        <if test="record.updatedAt != null">#{record.updatedAt,jdbcType=TIMESTAMP},</if>
    </sql>
    <sql id="Insert_Values_WithId">
        <if test="record.id != null">#{record.id,jdbcType=INTEGER},</if>
        <include refid="Insert_Values"/>
    </sql>
    <sql id="Batch_Insert_Values">
        #{record.code,jdbcType=VARCHAR},
        #{record.name,jdbcType=VARCHAR},
        #{record.host,jdbcType=VARCHAR},
        #{record.enableDeposit,jdbcType=TINYINT},
        #{record.enableAggregate,jdbcType=TINYINT},
        #{record.enableWithdraw,jdbcType=TINYINT},
        #{record.enableSign,jdbcType=TINYINT},
        #{record.enableStat,jdbcType=TINYINT},
        #{record.enableCrawler,jdbcType=TINYINT},
        #{record.enableReloadCache,jdbcType=TINYINT},
        #{record.status,jdbcType=INTEGER},
        #{record.memo,jdbcType=VARCHAR},
        #{record.createdAt,jdbcType=TIMESTAMP},
        #{record.updatedAt,jdbcType=TIMESTAMP},
    </sql>
    <sql id="Batch_Insert_Values_WithId">
        #{record.id,jdbcType=INTEGER},
        <include refid="Batch_Insert_Values"/>
    </sql>
    <sql id="Update_Set_From_Bean">
        <if test="record.code != null">code = #{record.code,jdbcType=VARCHAR} ,</if>
        <if test="record.name != null">name = #{record.name,jdbcType=VARCHAR} ,</if>
        <if test="record.host != null">host = #{record.host,jdbcType=VARCHAR} ,</if>
        <if test="record.enableDeposit != null">enable_deposit = #{record.enableDeposit,jdbcType=TINYINT} ,</if>
        <if test="record.enableAggregate != null">enable_aggregate = #{record.enableAggregate,jdbcType=TINYINT} ,</if>
        <if test="record.enableWithdraw != null">enable_withdraw = #{record.enableWithdraw,jdbcType=TINYINT} ,</if>
        <if test="record.enableSign != null">enable_sign = #{record.enableSign,jdbcType=TINYINT} ,</if>
        <if test="record.enableStat != null">enable_stat = #{record.enableStat,jdbcType=TINYINT} ,</if>
        <if test="record.enableCrawler != null">enable_crawler = #{record.enableCrawler,jdbcType=TINYINT} ,</if>
        <if test="record.enableReloadCache != null">enable_reload_cache = #{record.enableReloadCache,jdbcType=TINYINT} ,</if>
        <if test="record.status != null">status = #{record.status,jdbcType=INTEGER} ,</if>
        <if test="record.memo != null">memo = #{record.memo,jdbcType=VARCHAR} ,</if>
        <if test="record.createdAt != null">created_at = #{record.createdAt,jdbcType=TIMESTAMP} ,</if>
        <if test="record.updatedAt != null">updated_at = #{record.updatedAt,jdbcType=TIMESTAMP} ,</if>
    </sql>
    <sql id="On_Duplicate_Key_Update">
        ON DUPLICATE KEY
        UPDATE
            code =
        VALUES (code), name =
        VALUES (name), host =
        VALUES (host), enable_deposit =
        VALUES (enable_deposit), enable_aggregate =
        VALUES (enable_aggregate), enable_withdraw =
        VALUES (enable_withdraw), enable_sign =
        VALUES (enable_sign), enable_stat =
        VALUES (enable_stat), enable_crawler =
        VALUES (enable_crawler), enable_reload_cache =
        VALUES (enable_reload_cache), status =
        VALUES (status), memo =
        VALUES (memo), created_at =
        VALUES (created_at), updated_at =
        VALUES (updated_at)    </sql>
    <!-- insert -->
    <insert id="insert" parameterType="java.util.Map">
        <selectKey resultType="java.lang.Integer" keyProperty="record.id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into
        <include refid="Table_Name"/>
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <include refid="Insert_Columns"/>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <include refid="Insert_Values"/>
        </trim>
    </insert>
    <insert id="insertWithId" parameterType="java.util.Map">
        insert into
        <include refid="Table_Name"/>
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <include refid="Insert_Columns_WithId"/>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <include refid="Insert_Values_WithId"/>
        </trim>
    </insert>
    <insert id="batchInsert" parameterType="java.util.Map">
        insert into
        <include refid="Table_Name"/>
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <include refid="Base_Column_List"/>
        </trim>
        values
        <foreach collection="records" item="record" index="index" separator=",">
            <trim prefix="(" suffix=")" suffixOverrides=",">
                <include refid="Batch_Insert_Values"/>
            </trim>
        </foreach>
    </insert>
    <insert id="batchInsertWithId" parameterType="java.util.Map">
        insert into
        <include refid="Table_Name"/>
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <include refid="Base_Column_List_WithId"/>
        </trim>
        values
        <foreach collection="records" item="record" index="index" separator=",">
            <trim prefix="(" suffix=")" suffixOverrides=",">
                <include refid="Batch_Insert_Values_WithId"/>
            </trim>
        </foreach>
    </insert>
    <insert id="batchInsertOnDuplicateKey" parameterType="java.util.Map">
        insert into
        <include refid="Table_Name"/>
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <include refid="Base_Column_List"/>
        </trim>
        values
        <foreach collection="records" item="record" index="index" separator=",">
            <trim prefix="(" suffix=")" suffixOverrides=",">
                <include refid="Batch_Insert_Values"/>
            </trim>
        </foreach>
        <include refid="On_Duplicate_Key_Update"/>
    </insert>
    <insert id="batchInsertWithIdOnDuplicateKey" parameterType="java.util.Map">
        insert into
        <include refid="Table_Name"/>
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <include refid="Base_Column_List_WithId"/>
        </trim>
        values
        <foreach collection="records" item="record" index="index" separator=",">
            <trim prefix="(" suffix=")" suffixOverrides=",">
                <include refid="Batch_Insert_Values_WithId"/>
            </trim>
        </foreach>
        <include refid="On_Duplicate_Key_Update"/>
    </insert>
    <!-- end insert -->
    <!-- delete -->
    <delete id="deleteById" parameterType="java.util.Map">
        delete
        from
        <include refid="Table_Name"/>
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <delete id="deleteByExample" parameterType="java.util.Map">
        delete from
        <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <delete id="deleteIn" parameterType="java.util.Map">
        delete from
        <include refid="Table_Name"/>
        where id in
        <foreach collection="ids" item="id" index="index" open="(" separator="," close=")">
            #{id,jdbcType=INTEGER}
        </foreach>
    </delete>
    <!-- end delete -->
    <!-- update -->
    <update id="updateById" parameterType="java.util.Map">
        update
        <include refid="Table_Name"/>
        <set>
            <include refid="Update_Set_From_Bean"/>
        </set>
        where id = #{record.id,jdbcType=INTEGER}
    </update>
    <update id="updateByExample" parameterType="java.util.Map">
        update
        <include refid="Table_Name"/>
        <set>
            <include refid="Update_Set_From_Bean"/>
        </set>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </update>
    <update id="batchUpdateById" parameterType="java.util.Map">
        <foreach collection="records" item="record" index="index" open="" close="" separator=";">
            update
            <include refid="Table_Name"/>
            <set>
                <include refid="Update_Set_From_Bean"/>
            </set>
            where id = #{record.id,jdbcType=INTEGER}
        </foreach>
    </update>
    <!-- end update -->
    <!-- select -->
    <select id="selectById" resultMap="SysServerNodeMap" parameterType="java.util.Map">
        select
        <include refid="Select_Column_List"/>
        from
        <include refid="Table_Name"/>
        where id = #{id,jdbcType=INTEGER}
    </select>
    <select id="selectByExample" resultMap="SysServerNodeMap" parameterType="java.util.Map">
        select
        <if test="example != null and example.distinct">
            distinct
        </if>
        <include refid="Select_Column_List"/>
        from
        <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="example != null and example.orderByClause != null">
            order by ${example.orderByClause}
        </if>
    </select>
    <select id="selectOneByExample" resultMap="SysServerNodeMap" parameterType="java.util.Map">
        select
        <include refid="Select_Column_List"/>
        from
        <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
        limit 1
    </select>
    <select id="selectIn" resultMap="SysServerNodeMap" parameterType="java.util.Map">
        select
        <include refid="Select_Column_List"/>
        from
        <include refid="Table_Name"/>
        where id IN
        <foreach collection="ids" item="id" index="index" open="(" separator="," close=")">
            #{id,jdbcType=INTEGER}
        </foreach>
    </select>
    <select id="countByExample" resultType="java.lang.Integer" parameterType="java.util.Map">
        select count(*) as total from
        <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <select id="countByPager" resultType="java.lang.Integer" parameterType="java.util.Map">
        select count(*) as total from
        <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <select id="selectByPager" resultMap="SysServerNodeMap" parameterType="java.util.Map">
        select
        <include refid="Select_Column_List"/>
        from
        <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="pager.sortItem != null and pager.sortItem != '' ">
            order by ${pager.sortItem} ${pager.sortType}
        </if>
        limit #{pager.startIndex} , #{pager.pageSize}
    </select>
    <select id="countByIdPager" resultType="java.util.Map" parameterType="java.util.Map">
        select convert(max(${pager.sortItem}), SIGNED) maxId,convert(min(${pager.sortItem}), SIGNED) minId,count(*) total from
        <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <select id="selectByIdPager" resultMap="SysServerNodeMap" parameterType="java.util.Map">
        select
        <include refid="Select_Column_List"/>
        from
        <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="pager.sortItem != null and pager.sortItem != '' ">
            order by ${pager.sortItem} ${pager.sortType}
        </if>
        limit #{pager.pageSize}
    </select>
    <!-- end select -->
    <!-- CodeBuilder Template Generated By MybatisX End -->
</mapper>
