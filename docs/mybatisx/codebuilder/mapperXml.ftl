<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="${repository.packageName}.${repository.fileName}">
    <!-- CodeBuilder Template Generated By MybatisX Start -->
    <resultMap id="${tableClass.shortClassName}Map" type="${tableClass.fullClassName}">
        <#list tableClass.pkFields as field>
            <id column="${field.columnName}" property="${field.fieldName}" jdbcType="${field.jdbcType}"/>
            <#assign pkFieldName = field.fieldName />
            <#assign pkColumnName = field.columnName />
            <#assign pkJdbcType =field.jdbcType />
            <#assign pkFullTypeName =field.fullTypeName />
        </#list>
        <#list tableClass.baseFields as field>
            <result column="${field.columnName}" property="${field.fieldName}" jdbcType="${field.jdbcType}"/>
        </#list>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and <#noparse>$</#noparse>{criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and <#noparse>$</#noparse>{criterion.condition} <#noparse>#</#noparse>{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and <#noparse>$</#noparse>{criterion.condition} <#noparse>#</#noparse>{criterion.value} and <#noparse>#</#noparse>{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and <#noparse>$</#noparse>{criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        <#noparse>#</#noparse>{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Table_Name">
        ${tableClass.tableName}
    </sql>
    <sql id="Base_Column_List">
        <#list tableClass.baseFields as field>
            ${field.columnName}<#sep>,
        </#list>
    </sql>
    <sql id="Base_Column_List_WithId">
        ${pkColumnName},
        <include refid="Base_Column_List"/>
    </sql>
    <sql id="Select_Column_List">
        <if test="columns != null and columns.size > 0">
            <foreach collection="columns" item="column" index="index" separator=",">
                <#noparse>$</#noparse>{column}
            </foreach>
        </if>
        <if test="columns == null or columns.size == 0">
            <include refid="Base_Column_List_WithId"/>
        </if>
    </sql>
    <sql id="Insert_Columns">
        <#list tableClass.baseFields as field>
            <if test="record.${field.fieldName} != null">${field.columnName},</if>
        </#list>
    </sql>
    <sql id="Insert_Columns_WithId">
        <if test="record.${pkFieldName} != null">${pkColumnName},</if>
        <include refid="Insert_Columns"/>
    </sql>
    <sql id="Insert_Values">
        <#list tableClass.baseFields as field>
            <if test="record.${field.fieldName} != null"><#noparse>#</#noparse>{record.${field.fieldName},jdbcType=${field.jdbcType}},</if>
        </#list>
    </sql>
    <sql id="Insert_Values_WithId">
        <if test="record.${pkFieldName} != null"><#noparse>#</#noparse>{record.${pkFieldName},jdbcType=${pkJdbcType}},</if>
        <include refid="Insert_Values"/>
    </sql>
    <sql id="Batch_Insert_Values">
        <#list tableClass.baseFields as field>
            <#noparse>#</#noparse>{record.${field.fieldName},jdbcType=${field.jdbcType}},
        </#list>
    </sql>
    <sql id="Batch_Insert_Values_WithId">
        <#noparse>#</#noparse>{record.${pkFieldName},jdbcType=${pkJdbcType}},
        <include refid="Batch_Insert_Values"/>
    </sql>
    <sql id="Update_Set_From_Bean">
        <#list tableClass.baseFields as field>
            <if test="record.${field.fieldName} != null">${field.columnName} = <#noparse>#</#noparse>{record.${field.fieldName},jdbcType=${field.jdbcType}} ,</if>
        </#list>
    </sql>
    <sql id="On_Duplicate_Key_Update">
        ON DUPLICATE KEY
        UPDATE
        <#list tableClass.baseFields as field>
            ${field.columnName} = VALUES (${field.columnName})<#sep>,
        </#list>
    </sql>
    <!-- insert -->
    <insert id="insert" parameterType="java.util.Map">
        <selectKey resultType="${pkFullTypeName}" keyProperty="record.id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into
        <include refid="Table_Name"/>
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <include refid="Insert_Columns"/>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <include refid="Insert_Values"/>
        </trim>
    </insert>
    <insert id="insertWithId" parameterType="java.util.Map">
        insert into
        <include refid="Table_Name"/>
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <include refid="Insert_Columns_WithId"/>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <include refid="Insert_Values_WithId"/>
        </trim>
    </insert>
    <insert id="batchInsert" parameterType="java.util.Map">
        insert into
        <include refid="Table_Name"/>
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <include refid="Base_Column_List"/>
        </trim>
        values
        <foreach collection="records" item="record" index="index" separator=",">
            <trim prefix="(" suffix=")" suffixOverrides=",">
                <include refid="Batch_Insert_Values"/>
            </trim>
        </foreach>
    </insert>
    <insert id="batchInsertWithId" parameterType="java.util.Map">
        insert into
        <include refid="Table_Name"/>
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <include refid="Base_Column_List_WithId"/>
        </trim>
        values
        <foreach collection="records" item="record" index="index" separator=",">
            <trim prefix="(" suffix=")" suffixOverrides=",">
                <include refid="Batch_Insert_Values_WithId"/>
            </trim>
        </foreach>
    </insert>
    <insert id="batchInsertOnDuplicateKey" parameterType="java.util.Map">
        insert into
        <include refid="Table_Name"/>
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <include refid="Base_Column_List"/>
        </trim>
        values
        <foreach collection="records" item="record" index="index" separator=",">
            <trim prefix="(" suffix=")" suffixOverrides=",">
                <include refid="Batch_Insert_Values"/>
            </trim>
        </foreach>
        <include refid="On_Duplicate_Key_Update"/>
    </insert>
    <insert id="batchInsertWithIdOnDuplicateKey" parameterType="java.util.Map">
        insert into
        <include refid="Table_Name"/>
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <include refid="Base_Column_List_WithId"/>
        </trim>
        values
        <foreach collection="records" item="record" index="index" separator=",">
            <trim prefix="(" suffix=")" suffixOverrides=",">
                <include refid="Batch_Insert_Values_WithId"/>
            </trim>
        </foreach>
        <include refid="On_Duplicate_Key_Update"/>
    </insert>
    <!-- end insert -->
    <!-- delete -->
    <delete id="deleteById" parameterType="java.util.Map">
        delete
        from
        <include refid="Table_Name"/>
        where ${pkColumnName} = <#noparse>#</#noparse>{id,jdbcType=${pkJdbcType}}
    </delete>
    <delete id="deleteByExample" parameterType="java.util.Map">
        delete from
        <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <delete id="deleteIn" parameterType="java.util.Map">
        delete from
        <include refid="Table_Name"/>
        where id in
        <foreach collection="ids" item="id" index="index" open="(" separator="," close=")">
            <#noparse>#</#noparse>{id,jdbcType=${pkJdbcType}}
        </foreach>
    </delete>
    <!-- end delete -->
    <!-- update -->
    <update id="updateById" parameterType="java.util.Map">
        update
        <include refid="Table_Name"/>
        <set>
            <include refid="Update_Set_From_Bean"/>
        </set>
        where ${pkColumnName} = <#noparse>#</#noparse>{record.${pkFieldName},jdbcType=${pkJdbcType}}
    </update>
    <update id="updateByExample" parameterType="java.util.Map">
        update
        <include refid="Table_Name"/>
        <set>
            <include refid="Update_Set_From_Bean"/>
        </set>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </update>
    <update id="batchUpdateById" parameterType="java.util.Map">
        <foreach collection="records" item="record" index="index" open="" close="" separator=";">
            update
            <include refid="Table_Name"/>
            <set>
                <include refid="Update_Set_From_Bean"/>
            </set>
            where ${pkColumnName} = <#noparse>#</#noparse>{record.${pkFieldName},jdbcType=${pkJdbcType}}
        </foreach>
    </update>
    <!-- end update -->
    <!-- select -->
    <select id="selectById" resultMap="${tableClass.shortClassName}Map" parameterType="java.util.Map">
        select
        <include refid="Select_Column_List"/>
        from
        <include refid="Table_Name"/>
        where ${pkColumnName} = <#noparse>#</#noparse>{id,jdbcType=${pkJdbcType}}
    </select>
    <select id="selectByExample" resultMap="${tableClass.shortClassName}Map" parameterType="java.util.Map">
        select
        <if test="example != null and example.distinct">
            distinct
        </if>
        <include refid="Select_Column_List"/>
        from
        <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="example != null and example.orderByClause != null">
            order by <#noparse>$</#noparse>{example.orderByClause}
        </if>
    </select>
    <select id="selectOneByExample" resultMap="${tableClass.shortClassName}Map" parameterType="java.util.Map">
        select
        <include refid="Select_Column_List"/>
        from
        <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
        limit 1
    </select>
    <select id="selectIn" resultMap="${tableClass.shortClassName}Map" parameterType="java.util.Map">
        select
        <include refid="Select_Column_List"/>
        from
        <include refid="Table_Name"/>
        where id IN
        <foreach collection="ids" item="id" index="index" open="(" separator="," close=")">
            <#noparse>#</#noparse>{id,jdbcType=${pkJdbcType}}
        </foreach>
    </select>
    <select id="countByExample" resultType="java.lang.Integer" parameterType="java.util.Map">
        select count(*) as total from
        <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <select id="countByPager" resultType="java.lang.Integer" parameterType="java.util.Map">
        select count(*) as total from
        <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <select id="selectByPager" resultMap="${tableClass.shortClassName}Map" parameterType="java.util.Map">
        select
        <include refid="Select_Column_List"/>
        from
        <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="pager.sortItem != null and pager.sortItem != '' ">
            order by <#noparse>$</#noparse>{pager.sortItem} <#noparse>$</#noparse>{pager.sortType}
        </if>
        limit <#noparse>#</#noparse>{pager.startIndex} , <#noparse>#</#noparse>{pager.pageSize}
    </select>
    <select id="countByIdPager" resultType="java.util.Map" parameterType="java.util.Map">
        select convert(max(<#noparse>$</#noparse>{pager.sortItem}), SIGNED) maxId,convert(min(<#noparse>$</#noparse>{pager.sortItem}), SIGNED) minId,count(*) total from
        <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <select id="selectByIdPager" resultMap="${tableClass.shortClassName}Map" parameterType="java.util.Map">
        select
        <include refid="Select_Column_List"/>
        from
        <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="pager.sortItem != null and pager.sortItem != '' ">
            order by <#noparse>$</#noparse>{pager.sortItem} <#noparse>$</#noparse>{pager.sortType}
        </if>
        limit <#noparse>#</#noparse>{pager.pageSize}
    </select>
    <!-- end select -->
    <!-- CodeBuilder Template Generated By MybatisX End -->
</mapper>
